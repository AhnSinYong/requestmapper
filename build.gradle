buildscript {

    ext {
        kotlin_version = '1.1.50'
        junit_jupiter_version = '5.0.0-M4'
        hamcrest_version = '1.3'
        gradle_intellij_plugin = '0.2.17'
        gradle_plugin = '2.5'
    }

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.org.jetbrains.intellij.plugins:gradle-intellij-plugin:$gradle_intellij_plugin"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$gradle_plugin"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

repositories {
    mavenCentral()
}

apply plugin: "org.jetbrains.intellij"
apply plugin: "java"
apply plugin: "kotlin"
apply plugin: "idea"
apply plugin: "org.sonarqube"
apply plugin: "jacoco"

group "com.viartemev.requestmapper"
version "0.6"

dependencies {
    compile("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")
    compile("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")

    testCompile("org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version")
    testCompile("org.hamcrest:hamcrest-library:$hamcrest_version")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version")
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

intellij {
    pluginName "Request mapper"
    type 'IC'
    version '2016.3'
}

patchPluginXml {
    version '0.6'
    sinceBuild '141.0'
    untilBuild ''
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.2.1'
}

buildPlugin.dependsOn 'validate'

task validate() {
    new File(".").eachDirRecurse() { dir ->
        dir.eachFileMatch(~/.*.java/) { file ->
            if (file.getText().contains("System.out.print")) {
                throw new GradleException('Project has invalid constructions')
            }
        }
    }
}